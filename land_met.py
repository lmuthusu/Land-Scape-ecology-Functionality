# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LandscapeMetrics
                                 A QGIS plugin
 This plug-in calculates landscape metrics based on hexagonal grids
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-23
        git sha              : $Format:%H$
        copyright            : (C) 2020 by LalithaMuthuSubramanian
        email                : lalitha@nmsu.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication,QFileInfo
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QMessageBox
from qgis.core import QgsProject, QgsRasterLayer
from PyQt5.QtWidgets import QFileDialog

#Clip Import #import
import operator
from osgeo import gdal, gdalnumeric, ogr, osr,gdal_array,gdalconst
from PIL import Image, ImageDraw
gdal.UseExceptions()
# Initialize Qt resources from file resources.py
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .land_met_dialog import LandscapeMetricsDialog
import os.path
import shapefile
from .allfunc import *

class LandscapeMetrics:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'LandscapeMetrics_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Land-Met')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('LandscapeMetrics', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/land_met/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Land-Met'),
                action)
            self.iface.removeToolBarIcon(action)
## --------------------------------------------------------
## Function to saveclipped raster
## --------------------------------------------------------
    def select_output_file(self):
      filename, _filter = QFileDialog.getSaveFileName(
        self.dlg, "Select   output file ","", '*.Tiff')
      self.dlg.lineEdit.setText(filename)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = LandscapeMetricsDialog()
            self.dlg.pushButton.clicked.connect(self.select_output_file)
        self.dlg.comboBox1.clear()
        self.dlg.comboBox2.clear()



        # Fetch currently loaded raster layers
        #layers = QgsProject.instance().layerTreeRoot().children()
        layers = QgsProject.instance().mapLayers().values()
        layer_list_shape = []
        layer_source_shape = []
        layer_list_raster = []
        layer_source_raster = []

        def printMsg(self,msg):
            QMessageBox.information(self.iface.mainWindow(),"Debug",msg)

        for layer in layers:
            layerType = layer.type()
            if layerType == 1:
                layer_list_raster.append(layer.name())
                layer_source_raster.append(layer.source())
            elif layerType == 0:
                layer_list_shape.append(layer.name())
                layer_source_shape.append(layer.source())

        self.dlg.comboBox1.addItems(layer_list_raster)
        self.dlg.comboBox2.addItems(layer_list_shape)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            raster_path_index =self.dlg.comboBox1.currentIndex()
            raster_path = layer_source_raster[raster_path_index]

            #Import shape file layer here
            #shapeLayerIndex = self.dlg.comboBox2.currentIndex()
            shape_path_index =self.dlg.comboBox2.currentIndex()
            shape_src_split = layer_source_shape[shape_path_index].split("|")
            shapefile_path = shape_src_split[0]

            printMsg(self,str(shapefile_path))



            output = self.dlg.lineEdit.text()
            srcArray = gdalnumeric.LoadFile(raster_path)

            # Also load as a gdal image to get geotransform
            # (world file) info
            srcImage = gdal.Open(raster_path)
            geoTrans = srcImage.GetGeoTransform()

            # Create an OGR layer from a boundary shapefile
            shapef = ogr.Open(shapefile_path)
            # Load the source data as a gdalnumeric array
            lyr = shapef.GetLayer( os.path.split( os.path.splitext( shapefile_path )[0] )[1] )
            poly = lyr.GetNextFeature()

            # Convert the layer extent to image pixel coordinates
            minX, maxX, minY, maxY = lyr.GetExtent()
            ulX, ulY = world2Pixel(geoTrans, minX, maxY)
            lrX, lrY = world2Pixel(geoTrans, maxX, minY)

            # Calculate the pixel size of the new image
            pxWidth = int(lrX - ulX)
            pxHeight = int(lrY - ulY)

            clip = srcArray[:, ulY:lrY, ulX:lrX]

            #
            # EDIT: create pixel offset to pass to new image Projection info
            #
            xoffset =  ulX
            yoffset =  ulY
            print ("Xoffset, Yoffset = ( %f, %f )" % ( xoffset, yoffset ))

            # Create a new geomatrix for the image
            geoTrans = list(geoTrans)
            geoTrans[0] = minX
            geoTrans[3] = maxY

            # Map points to pixels for drawing the
            # boundary on a blank 8-bit,
            # black and white, mask image.
            points = []
            pixels = []
            geom = poly.GetGeometryRef()
            pts = geom.GetGeometryRef(0)
            for p in range(pts.GetPointCount()):
              points.append((pts.GetX(p), pts.GetY(p)))
            for p in points:
              pixels.append(world2Pixel(geoTrans, p[0], p[1]))
            rasterPoly = Image.new("L", (pxWidth, pxHeight), 1)
            rasterize = ImageDraw.Draw(rasterPoly)
            rasterize.polygon(pixels,0)
            mask = imageToArray(rasterPoly)

            # Clip the image using the mask
            clip = gdalnumeric.choose(mask, \
                (clip, 0)).astype(gdalnumeric.uint8)

            # This image has 3 bands so we stretch each one to make them
            # visually brighter
            #for i in range(3):
             # clip[:,:] = stretch(clip[:,:])

            # Save new tiff
            #
            #  EDIT: instead of SaveArray, let's break all the
            #  SaveArray steps out more explicity so
            #  we can overwrite the offset of the destination
            #  raster
            #
            ### the old way using SaveArray
            #
            # gdalnumeric.SaveArray(clip, "OUTPUT.tif", format="GTiff", prototype=raster_path)
            #
            ###
            #
            gtiffDriver = gdal.GetDriverByName( 'GTiff' )
            #if gtiffDriver is None:

            #    raise ValueError("Can't find GeoTiff Driver")
            #gtiffDriver.CreateCopy( output,
            #    OpenArray( clip, prototype_ds=raster_path, xoff=xoffset, yoff=yoffset )
            #)

            # Save as an 8-bit jpeg for an easy, quick preview
            clip = clip.astype(gdalnumeric.uint8)


            gdalnumeric.SaveArray(clip, str(output), format="GTiff")
            #src_array, filename, format="GTiff", prototype=None
            fileInfo = QFileInfo(output)
            baseName = fileInfo.baseName()
            rlayer = QgsRasterLayer(output,baseName)
            QgsProject.instance().addMapLayer(rlayer)
            if layer.isValid() is True:
                printMsg(self, "Layer was loaded successfully!")

            else:
                printMsg(self, "Unable to read basename and file path")

            gdal.ErrorReset()
